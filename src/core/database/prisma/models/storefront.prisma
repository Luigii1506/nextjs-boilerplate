// 🛒 STOREFRONT E-COMMERCE MODELS
// ================================
// Customer-facing e-commerce system - extends inventory for public consumption
// Feature flag: storefront
// Dependencies: inventory (core product data)





// 🛒 SHOPPING CART
model Cart {
  id        String   @id @default(cuid())
  sessionId String?  @unique  // For guest users
  userId    String?  @unique  // For logged-in users
  
  // 📊 Cart totals (calculated)
  subtotal   Decimal @db.Decimal(10, 2) @default(0)
  taxAmount  Decimal @db.Decimal(10, 2) @default(0)
  total      Decimal @db.Decimal(10, 2) @default(0)
  
  // 📅 Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime // Auto-cleanup old carts
  
  // 🔗 Relations
  user  User? @relation("UserCart", fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
  
  @@index([sessionId])
  @@index([userId])
  @@index([expiresAt])
  @@map("carts")
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String
  quantity  Int    @default(1)
  
  // 💰 Price snapshot (frozen at add time)
  unitPrice Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)
  
  // 📅 Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 🔗 Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([cartId, productId]) // One product per cart
  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
}

// 💖 WISHLIST
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  addedAt   DateTime @default(now())
  
  // 🔗 Relations
  user    User    @relation("UserWishlist", fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId]) // One product per user wishlist
  @@index([userId])
  @@index([productId])
  @@map("wishlist_items")
}

// 📦 ORDERS
model Order {
  id     String @id @default(cuid())
  number String @unique // Human-readable order number
  userId String? // Nullable for guest orders
  
  // 📧 Contact info (for guest orders)
  email      String
  phone      String?
  
  // 💰 Order totals
  subtotal      Decimal @db.Decimal(10, 2)
  taxAmount     Decimal @db.Decimal(10, 2)
  shippingCost  Decimal @db.Decimal(10, 2) @default(0)
  discountAmount Decimal @db.Decimal(10, 2) @default(0)
  total         Decimal @db.Decimal(10, 2)
  
  // 📊 Order status
  status           OrderStatus @default(PENDING)
  paymentStatus    PaymentStatus @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  
  // 📅 Important dates
  placedAt       DateTime @default(now())
  estimatedDelivery DateTime?
  shippedAt      DateTime?
  deliveredAt    DateTime?
  cancelledAt    DateTime?
  
  // 📍 Shipping info  
  trackingNumber    String?
  shippingMethod    String?
  shippingAddress   String? // JSON string with address data
  
  // 💳 Payment info
  paymentMethod     String?
  paymentIntentId   String? // Stripe, PayPal, etc.
  
  // 📝 Notes
  customerNotes String?
  adminNotes    String?
  
  // 📅 Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 🔗 Relations
  user            User?            @relation("UserOrders", fields: [userId], references: [id], onDelete: SetNull)
  items           OrderItem[]
  statusHistory   OrderStatusHistory[]
  
  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([placedAt])
  @@index([number])
  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  
  // 💰 Price snapshot (frozen at order time)
  unitPrice     Decimal @db.Decimal(10, 2)
  total         Decimal @db.Decimal(10, 2)
  
  // 📦 Product snapshot (in case product changes)
  productSku    String
  productName   String
  productImage  String?
  
  // 📅 Timestamps
  createdAt DateTime @default(now())
  
  // 🔗 Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  
  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model OrderStatusHistory {
  id      String      @id @default(cuid())
  orderId String
  status  OrderStatus
  notes   String?
  
  // 📅 Timestamps
  createdAt DateTime @default(now())
  
  // 🔗 Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([createdAt])
  @@map("order_status_history")
}

// ⭐ PRODUCT REVIEWS
model ProductReview {
  id        String  @id @default(cuid())
  productId String
  userId    String
  orderId   String? // Link to verified purchase
  
  // ⭐ Review content
  rating     Int     // 1-5 stars
  title      String?
  content    String
  
  // ✅ Verification
  isVerifiedPurchase Boolean @default(false)
  isPublished        Boolean @default(true)
  
  // 👍 Community engagement
  helpfulCount   Int @default(0)
  unhelpfulCount Int @default(0)
  
  // 📅 Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 🔗 Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([productId, userId]) // One review per user per product
  @@index([productId])
  @@index([rating])
  @@index([isPublished])
  @@map("product_reviews")
}

// 🏷️ ENUMS

enum OrderStatus {
  PENDING    // Order created, payment pending
  CONFIRMED  // Payment confirmed, processing
  PROCESSING // Order being prepared
  SHIPPED    // Order shipped
  DELIVERED  // Order delivered
  CANCELLED  // Order cancelled
  REFUNDED   // Order refunded
}

enum PaymentStatus {
  PENDING    // Payment not processed
  PAID       // Payment successful
  FAILED     // Payment failed
  REFUNDED   // Payment refunded
  PARTIALLY_REFUNDED // Partial refund
}

enum FulfillmentStatus {
  UNFULFILLED     // Not yet fulfilled
  PARTIALLY_FULFILLED // Some items fulfilled
  FULFILLED       // All items fulfilled
  SHIPPED         // Items shipped
  DELIVERED       // Items delivered
}

// 🔗 EXTENDED PRODUCT RELATIONS (add to inventory.prisma when storefront is active)
// Add these to the Product model in inventory.prisma:
//   cartItems      CartItem[]
//   orderItems     OrderItem[]
//   wishlistItems  WishlistItem[]
//   reviews        ProductReview[]
