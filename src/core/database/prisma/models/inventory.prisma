// üì¶ INVENTORY MANAGEMENT MODELS
// ===============================
// E-commerce inventory system - products, categories, suppliers, stock movements
// Feature flag: inventory

model Product {
  id          String   @id @default(cuid())
  sku         String   @unique // SKU √∫nico
  name        String
  description String?
  categoryId  String
  price       Decimal  @db.Decimal(10, 2) // Precio de venta
  cost        Decimal  @db.Decimal(10, 2) // Costo de adquisici√≥n
  stock       Int      @default(0)
  minStock    Int      @default(0)        // Stock m√≠nimo
  maxStock    Int?                        // Stock m√°ximo (opcional)
  unit        String   @default("piece")  // unidad, kg, litro, etc.
  barcode     String?  @unique           // C√≥digo de barras opcional
  images      String[] @default([])       // Array de URLs de im√°genes
  isActive    Boolean  @default(true)
  supplierId  String?                     // Proveedor opcional
  tags        String[] @default([])       // Tags para filtrado
  metadata    Json?                       // Metadata adicional flexible

  // üìÖ Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // üîó Relations
  category      Category        @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  supplier      Supplier?       @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  stockMovements StockMovement[] 

  // üß© STOREFRONT RELATIONS (active when FEATURE_STOREFRONT=true)  
  cartItems     CartItem[]     // MODULE: storefront
  orderItems    OrderItem[]    // MODULE: storefront
  wishlistItems WishlistItem[] // MODULE: storefront  
  reviews       ProductReview[] // MODULE: storefront
  
  // üõçÔ∏è STOREFRONT PUBLIC FIELDS
  isPublic        Boolean  @default(false)  // Visible in storefront
  publicPrice     Decimal? @db.Decimal(10, 2) // Public price (can be different from admin price)
  publicDescription String?                   // Customer-facing description
  publicImages    String[] @default([])       // Customer-facing images
  seoTitle        String?                     // SEO optimized title
  seoDescription  String?                     // SEO meta description
  seoKeywords     String[] @default([])       // SEO keywords
  featured        Boolean  @default(false)   // Featured product
  
  // üß© FUTURE: Other e-commerce relations
  // saleItems     SaleItem[]     // MODULE: pos

  @@index([categoryId])
  @@index([supplierId])
  @@index([sku])
  @@index([isActive])
  @@index([stock])
  @@index([isPublic])
  @@index([featured])
  @@index([publicPrice])
  @@map("products")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  parentId    String?                     // Para categor√≠as anidadas
  color       String?  @default("#6B7280") // Color hex para UI
  icon        String?                      // Icono (lucide name o URL)
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)        // Para ordenamiento custom
  
  // üõçÔ∏è STOREFRONT PUBLIC FIELDS
  isPublic         Boolean  @default(false)  // Visible in storefront
  publicDescription String?                   // Customer-facing description
  publicImage      String?                    // Customer-facing banner image
  seoTitle         String?                    // SEO optimized title
  seoDescription   String?                    // SEO meta description
  seoKeywords      String[] @default([])      // SEO keywords
  featured         Boolean  @default(false)  // Featured category

  // üìÖ Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // üîó Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@index([parentId])
  @@index([isActive])
  @@index([sortOrder])
  @@index([isPublic])
  @@index([featured])
  @@map("categories")
}

model Supplier {
  id             String   @id @default(cuid())
  name           String   @unique
  contactPerson  String?
  email          String?  @unique
  phone          String?
  website        String?
  taxId          String?  @unique         // RFC, NIT, etc.
  paymentTerms   Int      @default(30)    // d√≠as de cr√©dito
  isActive       Boolean  @default(true)
  rating         Decimal? @db.Decimal(2, 1) // 1.0-5.0 estrellas
  notes          String?

  // üìç Address (embedded)
  addressLine1   String?
  addressLine2   String?
  city           String?
  state          String?
  postalCode     String?
  country        String?  @default("MX")

  // üìÖ Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // üîó Relations
  products Product[]

  @@index([isActive])
  @@index([email])
  @@map("suppliers")
}

model StockMovement {
  id            String              @id @default(cuid())
  productId     String
  type          StockMovementType
  quantity      Int                 // Can be positive or negative
  previousStock Int                 // Stock antes del movimiento
  newStock      Int                 // Stock despu√©s del movimiento
  reason        String
  reference     String?             // Referencia externa (compra, venta, etc.)
  userId        String              // Usuario que realiz√≥ el movimiento
  
  // üìÖ Timestamps
  createdAt DateTime @default(now())

  // üîó Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  // üß© FUTURE: Relations to other modules
  // sale    Sale?   @relation(fields: [reference], references: [id]) // MODULE: pos
  // order   Order?  @relation(fields: [reference], references: [id]) // MODULE: ecommerce

  @@index([productId])
  @@index([type])
  @@index([createdAt])
  @@index([userId])
  @@map("stock_movements")
}

// üìä Enums
enum StockMovementType {
  IN          // Entrada de stock (compras, devoluciones)
  OUT         // Salida de stock (ventas, p√©rdidas)
  ADJUSTMENT  // Ajustes manuales de inventario
  TRANSFER    // Transferencias entre ubicaciones (futuro)
}

// üß© FUTURE: Additional models for advanced inventory features
// 
// model Location {
//   id       String @id @default(cuid())
//   name     String @unique
//   address  String?
//   isActive Boolean @default(true)
//   ...
// }
//
// model ProductLocation {
//   productId  String
//   locationId String
//   stock      Int @default(0)
//   ...
// }
