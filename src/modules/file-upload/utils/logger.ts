/**
 * üìÅ FILE-UPLOAD LITE LOGGER
 * ==========================
 *
 * Sistema de logging simplificado para operaciones cr√≠ticas de file-upload
 * Solo mantiene lo esencial: errores, operaciones importantes y uploads cr√≠ticos
 *
 * Updated: 2025-01-17 - Enterprise patterns v2.0 (Simplified)
 */

import { ENTERPRISE_CONFIG } from "../constants";

export type LogContext = Record<string, unknown>;

// üìÅ File operation context
export interface FileLogContext extends LogContext {
  userId?: string;
  fileName?: string;
  fileSize?: number;
  fileType?: string;
  uploadId?: string;
  requestId?: string;
}

/**
 * üèóÔ∏è FILE-UPLOAD LITE LOGGER
 *
 * Versi√≥n simplificada enfocada solo en lo cr√≠tico:
 * - ‚ùå Error logging para debugging
 * - üìÅ File operation logging para auditor√≠a
 * - üö® Security events para archivos sospechosos
 */
class FileUploadLiteLogger {
  private module: string;

  constructor(module: string) {
    this.module = module;
  }

  private shouldLog(): boolean {
    return (
      ENTERPRISE_CONFIG.enableAdvancedLogging ||
      process.env.NODE_ENV === "production"
    );
  }

  private getTimestamp(): string {
    return new Date().toISOString();
  }

  // ‚ùå ERROR LOGGING (Siempre habilitado)
  error(message: string, error?: unknown, context?: LogContext): void {
    console.error(`‚ùå ${this.module} | ${message}`, {
      timestamp: this.getTimestamp(),
      error:
        error instanceof Error
          ? {
              name: error.name,
              message: error.message,
              stack: error.stack,
            }
          : error,
      ...context,
    });
  }

  // üö® SECURITY LOGGING (Para archivos sospechosos)
  security(event: string, context: FileLogContext): void {
    console.warn(`üö® ${this.module} | SECURITY: ${event}`, {
      timestamp: this.getTimestamp(),
      level: "SECURITY_AUDIT",
      ...context,
    });
  }

  // üìÅ FILE OPERATION LOGGING (Solo operaciones cr√≠ticas)
  fileOperation(
    operation: string,
    fileName: string,
    success: boolean,
    details?: FileLogContext
  ): void {
    const status = success ? "‚úÖ" : "‚ùå";
    console.log(`üìÅ ${this.module} | ${operation} ${status}`, {
      timestamp: this.getTimestamp(),
      operation,
      fileName,
      success,
      ...(details || {}),
    });
  }

  // üì§ UPLOAD LOGGING (CR√çTICO)
  upload(
    uploadId: string,
    fileName: string,
    fileSize: number,
    status: "START" | "SUCCESS" | "FAILED",
    context?: FileLogContext
  ): void {
    const statusEmoji =
      status === "SUCCESS" ? "‚úÖ" : status === "FAILED" ? "‚ùå" : "üîÑ";
    console.log(`üì§ ${this.module} | UPLOAD_${status} ${statusEmoji}`, {
      timestamp: this.getTimestamp(),
      uploadId,
      fileName,
      fileSize,
      status,
      ...(context || {}),
    });
  }

  // ‚ÑπÔ∏è INFO LOGGING (Solo en desarrollo)
  info(message: string, context?: LogContext): void {
    if (this.shouldLog()) {
      console.log(`‚ÑπÔ∏è ${this.module} | ${message}`, {
        timestamp: this.getTimestamp(),
        ...context,
      });
    }
  }

  // üîç DEBUG LOGGING (Solo en desarrollo)
  debug(message: string, context?: LogContext): void {
    if (process.env.NODE_ENV === "development") {
      console.debug(`üîç ${this.module} | ${message}`, {
        timestamp: this.getTimestamp(),
        ...context,
      });
    }
  }
}

// üèóÔ∏è Factory function simplificada
export function createFileUploadLogger(module: string): FileUploadLiteLogger {
  return new FileUploadLiteLogger(`[FileUpload] ${module}`);
}

// üéØ Pre-configured loggers (solo los esenciales)
export const fileUploadHookLogger = createFileUploadLogger("Hook");
export const fileUploadServerActionLogger =
  createFileUploadLogger("ServerAction");
export const fileUploadSecurityLogger = createFileUploadLogger("Security");

// Para backward compatibility
export const fileUploadLogger = createFileUploadLogger("Main");
export const serverActionLogger = createFileUploadLogger("ServerAction"); // Alias
export const optimisticLogger = createFileUploadLogger("Optimistic");
