/**
 * üéØ USERS HOOKS INDEX - TANSTACK ONLY
 * ====================================
 *
 * Solo hooks optimizados con TanStack Query.
 * Zero legacy code, m√°xima performance enterprise.
 *
 * Enterprise: 2025-01-17 - Complete modern architecture
 */

// üéØ Core TanStack Query hooks
export { useUsersQuery } from "./useUsersQuery";
// üîç User details now handled directly by useUsersQuery - no separate hook needed
export { useUserModal } from "./useUserModal";

// üîç Search and filtering
export {
  useUsersSearch,
  useQuickSearch,
  useSearchFilters,
  USERS_SEARCH_QUERY_KEYS,
} from "./useUsersSearch";

// ‚ôæÔ∏è Infinite scroll and pagination
export {
  useUsersInfinite,
  useVirtualUsersList,
  USERS_INFINITE_QUERY_KEYS,
} from "./useUsersInfinite";

// üì¶ Bulk operations
export {
  useUsersBulk,
  useBulkSelection,
  type BulkOperation,
} from "./useUsersBulk";

// üóÑÔ∏è Advanced cache management
// üóÑÔ∏è Cache management now handled by TanStack Query automatically

// üéØ Centralized query keys
export const USER_QUERY_KEYS = {
  all: ["users"] as const,
  lists: () => [...USER_QUERY_KEYS.all, "list"] as const,
  details: () => [...USER_QUERY_KEYS.all, "detail"] as const,
  detail: (id: string) => [...USER_QUERY_KEYS.details(), id] as const,
  searches: () => [...USER_QUERY_KEYS.all, "search"] as const,
  search: (params: Record<string, unknown>) =>
    [...USER_QUERY_KEYS.searches(), params] as const,
  infinite: () => [...USER_QUERY_KEYS.all, "infinite"] as const,
  infiniteList: (params: Record<string, unknown>) =>
    [...USER_QUERY_KEYS.infinite(), "list", params] as const,
} as const;

// üéõÔ∏è Hook configuration presets
export const UserHookConfigs = {
  // üíª Standard admin panel configuration
  ADMIN_PANEL: {
    usersQuery: {
      staleTime: 30000,
      refetchOnWindowFocus: true,
    },
    search: {
      debounceMs: 300,
      enableSuggestions: true,
      enablePrefetch: true,
    },
    bulk: {
      maxBatchSize: 50,
      confirmBulkActions: true,
    },
    cache: {
      strategy: "balanced" as const,
    },
  },

  // üì± Mobile optimized configuration
  MOBILE_OPTIMIZED: {
    infinite: {
      pageSize: 15,
      enableVirtualScroll: true,
    },
    search: {
      debounceMs: 500, // Slower for mobile
      enableSuggestions: false,
    },
    cache: {
      strategy: "conservative" as const,
    },
  },

  // ‚ö° High performance configuration
  HIGH_PERFORMANCE: {
    usersQuery: {
      staleTime: 5000,
      refetchInterval: 10000,
    },
    virtual: {
      enableVirtualization: true,
      itemHeight: 120,
    },
    cache: {
      strategy: "aggressive" as const,
      enableBackgroundUpdates: true,
      enablePredictivePrefetch: true,
    },
  },
} as const;

// üõ†Ô∏è Hook utilities and metadata
export const UserHookUtils = {
  // üéØ Available hooks registry
  HOOKS_REGISTRY: {
    core: ["useUsersQuery", "useUserModal"],
    search: ["useUsersSearch", "useQuickSearch", "useSearchFilters"],
    infinite: ["useUsersInfinite", "useVirtualUsersList"],
    bulk: ["useUsersBulk", "useBulkSelection"],
    cache: [], // TanStack Query handles caching automatically
  } as const,

  // üìä Performance profiles
  PERFORMANCE_PROFILES: {
    useUsersQuery: { memory: "medium", cpu: "low", network: "medium" },
    useUsersInfinite: { memory: "high", cpu: "medium", network: "low" },
    useUsersSearch: { memory: "low", cpu: "medium", network: "high" },
    useUsersBulk: { memory: "medium", cpu: "high", network: "high" },
    // Cache management moved to TanStack Query configuration
  } as const,

  // üéØ Get performance profile helper
  getPerformanceProfile: (
    hookName: keyof typeof UserHookUtils.PERFORMANCE_PROFILES
  ) => {
    return (
      UserHookUtils.PERFORMANCE_PROFILES[hookName] || {
        memory: "unknown",
        cpu: "unknown",
        network: "unknown",
      }
    );
  },
} as const;

// üìù Type exports
export type {
  User,
  CreateUserForm,
  EditUserForm,
  BanUserForm,
  UserStats,
  UserFilters,
} from "../types";

// üéØ Default export - Configuration registry
export default {
  configs: UserHookConfigs,
  utils: UserHookUtils,
  queryKeys: USER_QUERY_KEYS,
} as const;
