'use server';

import { revalidatePath } from 'next/cache';
import { z } from 'zod';
import { {{camelCase name}}Service } from './service';
import { 
  Create{{pascalCase name}}Dto, 
  Update{{pascalCase name}}Dto,
  {{pascalCase name}}FilterOptions
} from '../types';

// Esquema de validación para la creación
const create{{pascalCase name}}Schema = z.object({
  // Define el esquema de validación según tus necesidades
  // Ejemplo:
  // name: z.string().min(3).max(100),
  // email: z.string().email(),
});

export async function get{{pascalCase name}}List(
  options: {{pascalCase name}}FilterOptions = {}
) {
  try {
    return await {{camelCase name}}Service.findAll(options);
  } catch (error) {
    console.error('Error al obtener la lista de {{camelCase name}}', error);
    throw new Error('Error al obtener la lista de {{camelCase name}}');
  }
}

export async function get{{pascalCase name}}ById(id: string) {
  try {
    return await {{camelCase name}}Service.findById(id);
  } catch (error) {
    console.error('Error al obtener {{camelCase name}} por ID', error);
    throw new Error('Error al obtener {{camelCase name}}');
  }
}

export async function create{{pascalCase name}}(data: Create{{pascalCase name}}Dto) {
  try {
    // Validar los datos de entrada
    const validatedData = create{{pascalCase name}}Schema.parse(data);
    
    // Crear el registro
    const result = await {{camelCase name}}Service.create(validatedData);
    
    // Revalidar la caché
    revalidatePath('/{{kebabCase name}}');
    
    return { 
      success: true, 
      data: result,
      message: '{{pascalCase name}} creado exitosamente' 
    };
  } catch (error) {
    console.error('Error al crear {{camelCase name}}', error);
    return { 
      success: false, 
      message: error instanceof Error ? error.message : 'Error al crear {{camelCase name}}' 
    };
  }
}

export async function update{{pascalCase name}}(
  id: string, 
  data: Update{{pascalCase name}}Dto
) {
  try {
    // Validar los datos de entrada
    const validatedData = create{{pascalCase name}}Schema.partial().parse(data);
    
    // Actualizar el registro
    const result = await {{camelCase name}}Service.update(id, validatedData);
    
    // Revalidar la caché
    revalidatePath('/{{kebabCase name}}');
    revalidatePath(`/{{kebabCase name}}/${id}`);
    
    return { 
      success: true, 
      data: result,
      message: '{{pascalCase name}} actualizado exitosamente' 
    };
  } catch (error) {
    console.error('Error al actualizar {{camelCase name}}', error);
    return { 
      success: false, 
      message: error instanceof Error ? error.message : 'Error al actualizar {{camelCase name}}' 
    };
  }
}

export async function delete{{pascalCase name}}(id: string) {
  try {
    await {{camelCase name}}Service.delete(id);
    
    // Revalidar la caché
    revalidatePath('/{{kebabCase name}}');
    
    return { 
      success: true, 
      message: '{{pascalCase name}} eliminado exitosamente' 
    };
  } catch (error) {
    console.error('Error al eliminar {{camelCase name}}', error);
    return { 
      success: false, 
      message: 'Error al eliminar {{camelCase name}}' 
    };
  }
}
